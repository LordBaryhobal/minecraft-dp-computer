BRANCH is-perfect
OUT R1
STOP

//Find divisors
/*
    R1: number from which to find divisors
    R2: used as cache
*/

STORE R1 tmp-num  #is-perfect#
STORE R1 tmp-step

LOAD  R2 tmp-step #start-div-loop#
SUB   R2 one
LOAD  R1 zero
JEQ      end //tmp-step = 0 -> go to end of script

STORE R2 tmp-step
LOAD  R1 tmp-num 
DIV   R1 tmp-step
MUL   R1 tmp-step
LOAD  R2 tmp-num
JEQ      add-div //Found divisor -> add
JUMP     start-div-loop

LOAD  R1 tmp-sum #add-div#
ADD   R1 tmp-step
STORE R1 tmp-sum

//Output divisor
LOAD  R1 tmp-step
OUT   R1

JUMP     start-div-loop

LOAD  R1 tmp-num #end#
LOAD  R2 tmp-sum
JEQ      perfect
LOAD  R1 zero
RBR

LOAD  R1 one #perfect#
RBR

#tmp-num# 0
#tmp-sum# 0
#tmp-step# 0
#zero# 0
#one# 1
